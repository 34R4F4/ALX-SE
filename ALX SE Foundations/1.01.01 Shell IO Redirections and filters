

#Standard Output
	redirect output to a file

	'>'	To redirect standard output to a file
		$ [command]	 >	 [file_name]
		the result of command will saved in the file
	    ex:		$ ls > file_list.txt
		Each time the command repeated, file_list.txt is overwritten.

   '>>' append the command output to file content
		$ [command]	 >>	 [file_name]
		ex:		$ ls >> file_list.txt
		result added to the end of the file, each time the command is repeated
		If the file does not exist, file will be created.

#Standard Input
	redirect command input from a file

	'<'	take command input from a file instead of the keyboard
		$ [command]	 >	 [file_name]
		ex:		$ sort < file_list.txt

		command can have both its input and output redirected.
		ex:		$ sort < file_list.txt > sorted_file_list.txt


#Pipelines
	connect multiple commands together
	the standard output of one command is fed into the standard input of another.

	ex:		$ ls -l | less
	the output of the ls command is fed into less. By using this "| less" 



Examples of commands used together with pipelines:

	ls -lt | head 	
	Displays the 10 newest files in the current directory.
	
	du | sort -nr 	
	Displays a list of directories and how much space they consume, sorted from the largest to the smallest.
	
	find . -type f -print | wc -l 	
	Displays the total number of files in the current working directory and all of its subdirectories.


#Filters
	Filters take standard input and perform an operation upon it and send the results to standard output.
	[standard input]---->filters(operation)---->[standard output]


Common filter commands

	sort 	
	Sorts standard input then outputs the sorted result on standard output.
	
	uniq 	
	Given a sorted stream of data from standard input, it removes duplicate lines of data.
	
	grep 	
	Examines each line of data it receives from standard input and outputs every line that contains a specified pattern of characters.
	
	fmt 	
	Reads text from standard input, then outputs formatted text on standard output.
	
	pr 	
	Takes text input from standard input and splits the data into pages with page breaks, headers and footers in preparation for printing.

	lpr 
	program that accepts standard input and sends it to the printer.

	head 	
	Outputs the first few lines of its input. Useful for getting the header of a file.
	
	tail 	
	Outputs the last few lines of its input. Useful for things like getting the most recent entries from a log file.
	
	tr 	
	Translates characters. Can be used to perform tasks such as upper/lowercase conversions or changing line termination characters from one type to another (for example, converting DOS text files into Unix style text files).
	
	sed 	
	Stream editor. Can perform more sophisticated text translations than tr.
	
	awk 	
	An entire programming language designed for constructing filters. Extremely powerful.


$ cat poorly_formatted_report.txt | fmt | pr | lpr
	cat 	to read the file and output it to standard output
	|	piped into the standard input of fmt
	fmt 	formats the text into neat paragraphs and outputs it to standard output
	|	piped into the standard input of pr
	pr 	splits the text neatly into pages and outputs it to standard output
	|	piped into the standard input of lpr
	lpr 	takes its standard input and sends it to the printer.

$ cat unsorted_list_with_dupes.txt | sort | uniq | pr | lpr
unsorted list of data with duplicate entries. 
	cat 		sends the list into sort which sorts it 
	|		feeds it into uniq
	uniq		removes any duplicates
	| pr | lpr	paginate and print the list.


Viewing the contents of tar files ".tar.gz" or ".tgz"
$ tar tzvf name_of_file.tar.gz | less










