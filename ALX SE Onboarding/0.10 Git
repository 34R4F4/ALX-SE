============================    Git    ==============================
set git user name
    git config --global user.name "user_name"
set git user email
    git config --global user.email "user_email@example.com"
*create new project repo
    git init "project_name"
*show git repo(branchs-commits-files) status
    git status
*show git user name or email
    git config user.name
    git config user.email
* show git info
    git config --list
*add file to stage area
    git add file_name
*add multipl files
    git add file1_name file2_name file3_name
*unstage file from repo
    git rm --cached file_name
*commit
    git commit -m"message"
*add file from stage to repo
    git commit -m"creat file_name"
*show log
    git log
=====================================================================
0- git status
1-stage files
    git add file_name
2-commit changes
    git commit -m "Commit_change message"
----------------------------
undo and return to pervous commit
    git checkout perv_commit_hash
----------------------------
------  git branch  -------
show git branches
    git branch 
    *current_branch
work in master branch
    git checkout master
work in specific branch
    git checkout branch_name
=====================================================================
Repo(local/remote)
ls 
ls -a
cd project001
touch file.ext
=====================================================================

echo "# alx-pre_course" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/34R4F4/alx-pre_course.git
git push -u origin main

â€¦or push an existing repository from the command line

git remote add origin https://github.com/34R4F4/alx-pre_course.git
git branch -M main
git push -u origin main

========================================================================

    git init - Initializes a new Git repository.

git init

    git add - Stages changes to tracked files.

git add <file>

    git commit - Creates a new commit from staged changes.

git commit -m "Commit message"

    git status - Shows the status of the working directory and staging area.

git status

    git log - Shows the commit history.

git log

    git diff - Shows the differences between two revisions of a file.

git diff <old_revision> <new_revision>

    git checkout - Switches to a different branch or revision.

git checkout <branch_name>

    git branch - Creates or lists branches.

git branch

    git merge - Merges changes from one branch into another.

git merge <branch_name>

    git push - Pushes changes to a remote repository.

git push origin master

    git pull - Pulls changes from a remote repository.

git pull origin master

    git clone - Clones a remote repository to your local machine.

git clone <url>

These are just a few of the most used Git commands. For more information, you can visit the Git documentation: https://git-scm.com/docs.

Here are some additional commands that you may find useful:

    git stash - Temporarily stores changes that you don't want to commit yet.

git stash

    git reset - Undoes changes that have been staged or committed.

git reset <file>

    git revert - Creates a new commit that reverses the changes made in an earlier commit.

git revert <commit_hash>

    git tag - Marks a specific point in the commit history.

git tag <tag_name>

    git remote - Manage remote repositories.

git remote add origin <url>

    git config - Configure Git to your liking.

git config --global user.name "Your Name"
